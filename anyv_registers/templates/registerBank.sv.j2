
{% filter restructure %}

module {{component.name}} (
  {%- filter align %}
  // Control interface
  input        §        §§ control__pclock,
  input        §        §§ control__presetn,
  input        §        §§ control__psel,
  input        §        §§ control__penable,
  output logic §        §§ control__pready,
  input        §  [2:0] §§ control__pprot,
  input        § [31:0] §§ control__paddr,
  input        §        §§ control__pwrite,
  input        § [31:0] §§ control__pwdata,
  input        §  [7:0] §§ control__pstrb,
  output logic § [31:0] §§ control__prdata,
  output logic §        §§ control__pslverr,
  // Register read
  {%- for memoryMap in component.memoryMaps -%} {% for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
  {%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
  {%- if register.fields is defined -%} {%- for field in register.fields -%} {%- if field.hardwareAccess in ["read-write", "read-only"] %}
  output § {{field.bitWidth|arrsize}} §§ register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}},
  {%- endif -%} {%- endfor -%} {%- else -%} {%- if register.hardwareAccess in ["read-write", "read-only"] %}
  output § {{register.size|arrsize}}  §§ register__{{block_prefix}}{{register.name|snake|lower}},
  {%- endif -%} {%- endif -%}
  {%- endfor -%} {%- endfor %} {%- endfor %}
  // Register write
  {%- for memoryMap in component.memoryMaps -%} {% for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
  {%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
  {%- if register.fields is defined -%} {%- for field in register.fields -%} {%- if field.hardwareAccess in ["read-write", "write-only"] %}
  input §                            §§ register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__hw_write_enable,
  input § {{field.bitWidth|arrsize}} §§ register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__hw_write_data,
  {%- endif -%} {%- endfor -%} {%- else -%} {%- if register.hardwareAccess in ["read-write", "write-only"] %}
  input §                            §§ register__{{block_prefix}}{{register.name|snake|lower}}__hw_write_enable,
  input § {{register.size|arrsize}}  §§ register__{{block_prefix}}{{register.name|snake|lower}}__hw_write_data,
  {%- endif -%} {%- endif -%}
  {%- endfor -%} {%- endfor %} {%- endfor %}
  // Register lock
  {%- for memoryMap in component.memoryMaps -%} {% for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
  {%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
  {%- if register.fields is defined -%} {%- for field in register.fields -%} {%- if field.accessLock is defined %}
  input § §§ register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__lock,
  {%- endif -%} {%- endfor -%} {%- else -%} {%- if register.accessLock is defined %}
  input § §§ register__{{block_prefix}}{{register.name|snake|lower}}__lock,
  {%- endif -%} {%- endif -%}
  {%- endfor -%} {%- endfor %} {%- endfor %}
  // Dummy
  output § §§ dummy
  {%- endfilter %}
);

{§ spacing 1 §}

// Enumerated values
{%- filter align -%}
{%- for memoryMap in component.memoryMaps -%} {% for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
{%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
{%- if register.fields is defined -%} {%- for field in register.fields %} {%- if field.enumeratedValues is defined %} {%- for enumeratedValue in field.enumeratedValues %}
parameter § {{field.bitWidth|arrsize}} §§ {{block_prefix}}{{register.name|snake|upper}}__{{field.name|snake|upper}}__{{enumeratedValue.name|snake|upper}} § = {{enumeratedValue.value|hexadecimal}}; §§
{%- endfor -%} {%- endif -%} {%- endfor -%} {%- else %} {%- if register.enumeratedValues is defined %} {%- for enumeratedValue in register.enumeratedValues %}
parameter § {{register.size|arrsize}}  §§ {{block_prefix}}{{register.name|snake|upper}}__{{enumeratedValue.name|snake|upper}} § = {{enumeratedValue.value|hexadecimal}}; §§
{%- endfor -%} {%- endif -%} {%- endif -%}
{%- endfor -%} {%- endfor %} {%- endfor -%}
{%- endfilter %}

{§ spacing 1 §}

// Registers
{%- filter align -%}
{%- for memoryMap in component.memoryMaps -%} {% for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
{%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
{%- if register.fields is defined -%} {%- for field in register.fields %}
logic § {{field.bitWidth|arrsize}} §§ register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__register;
{%- endfor -%} {%- else %}
logic § {{register.size|arrsize}}  §§ register__{{block_prefix}}{{register.name|snake|lower}}__register;
{%- endif -%}
{%- endfor -%} {%- endfor %} {%- endfor -%}
{%- endfilter %}

{§ spacing 1 §}

// Reset and write
always_ff @(posedge control__pclock or negedge control__presetn) begin

  {§ spacing 1 §}

  // Reset
  if (!control__presetn) begin
    {%- filter align -%}
    {%- for memoryMap in component.memoryMaps -%} {%- for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
    {%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
    {%- if register.fields is defined -%} {%- for field in register.fields -%} {%- if field.reset is defined %}
    register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__register § <= {{field.bitWidth}}'h{{field.reset|hexadecimal}}; §§
    {%- endif -%}
    {%- endfor -%} {%- else -%} {%- if register.reset is defined -%}
    register__{{block_prefix}}{{register.name|snake|lower}}__register                             § <= {{register.width}}'h{{register.reset|hexadecimal}}; §§
    {%- endif -%} {%- endif -%}
    {%- endfor -%} {%- endfor -%} {%- endfor -%}
    {%- endfilter %}

  {§ spacing 1 §}

  // Software write
  end else if (   control__psel
               && control__penable
               && control__pwrite ) begin
    case (control__paddr)
      {%- filter align %}
      {%- for memoryMap in component.memoryMaps -%} {%- for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
      {%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
      {%- if register.fields is defined -%} {%- for field in register.fields -%} {%- if field.softwareAccess in ["read-write", "write-only"] %}
      32'h{{register.address|hexadecimal}} § : {% if field.accessLock is defined    and field.accessLock in ["read-write", "write-only"]    -%} if (!register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__lock) {%- endif %} § register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__register § <= control__pwdata § [{{field.bitOffset+field.bitWidth-1}}:{{field.bitOffset}}]; §§
      {%- endif -%} {%- endfor -%} {%- else %} {%- if register.softwareAccess in ["read-write", "write-only"] %}
      32'h{{register.address|hexadecimal}} § : {% if register.accessLock is defined and register.accessLock in ["read-write", "write-only"] -%} if (!register__{{block_prefix}}{{register.name|snake|lower}}__lock)                             {%- endif %} § register__{{block_prefix}}{{register.name|snake|lower}}__register                             § <= control__pwdata § [{{register.width-1}}:0]; §§
      {%- endif -%} {%- endif -%}
      {%- endfor -%} {%- endfor -%} {%- endfor -%}
      {%- endfilter %}
    endcase
  end

  {§ spacing 1 §}

  // Hardware write
  {%- for memoryMap in component.memoryMaps -%} {% for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
  {%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
  {%- if register.fields is defined -%} {%- for field in register.fields -%} {%- if field.hardwareAccess in ["read-write", "write-only"] %}
  if (register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__hw_write_enable)
    register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__register <= register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__hw_write_data;
  {%- endif -%} {%- endfor -%} {%- else -%} {%- if register.hardwareAccess in ["read-write", "write-only"] %}
  if (register__{{block_prefix}}{{register.name|snake|lower}}__hw_write_enable)
    register__{{block_prefix}}{{register.name|snake|lower}}__register <= register__{{block_prefix}}{{register.name|snake|lower}}__hw_write_data;
  {%- endif -%} {%- endif -%}
  {%- endfor -%} {%- endfor %} {%- endfor %}

  {§ spacing 1 §}

end

{§ spacing 1 §}

// Software response and read
always_comb begin
  if (   control__psel
      && control__penable ) begin

    {§ spacing 1 §}

    // Software response
    control__pready  = 1'b1;
    control__pslverr = 1'b0;

    {§ spacing 1 §}

    // Software read
    if (!control__pwrite) begin
      control__prdata  = 32'd0;
      case (control__paddr)

        {%- filter align %}
        {%- for memoryMap in component.memoryMaps -%} {%- for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
        {%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
        {%- if register.fields is defined %}
        32'h{{register.address|hexadecimal}} § : § begin {%- for field in register.fields -%} {%- if field.softwareAccess in ["read-write", "read-only"] %} § {% if field.accessLock is defined    and field.accessLock in ["read-write", "write-only"]    -%} if (!register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__lock) {%- endif %} § control__prdata § [{{field.bitOffset+field.bitWidth-1}}:{{field.bitOffset}}] §§ = register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__register; {{"end" if loop.last else "\n § § "}} {%- endif -%} {%- endfor -%}
        {%- else %} {%- if register.softwareAccess in ["read-write", "read-only"] %}
        32'h{{register.address|hexadecimal}} § : §                                                                                                          § {% if register.accessLock is defined and register.accessLock in ["read-write", "write-only"] -%} if (!register__{{block_prefix}}{{register.name|snake|lower}}__lock)                             {%- endif %} § control__prdata § [{{register.width-1}}:0]                                   §§ = register__{{block_prefix}}{{register.name|snake|lower}}__register;
        {%- endif -%} {%- endif -%}
        {%- endfor -%} {%- endfor -%} {%- endfor -%}
        {%- endfilter %}
        default: begin
          control__prdata  = 32'd0;
          control__pslverr =  1'b1;
        end
      endcase
    end

  {§ spacing 1 §}

  // Bus return to zero
  end else begin
    control__pready  =  1'b0;
    control__pslverr =  1'b0;
    control__prdata  = 32'd0;
  end

  {§ spacing 1 §}

end

{§ spacing 1 §}

// Hardware read
{%- filter align -%}
{%- for memoryMap in component.memoryMaps -%} {% for addressBlock in memoryMap.addressBlocks -%} {%- for register in addressBlock.registers %}
{%- set block_prefix = (addressBlock.name|snake|lower)~"__" if memoryMap.addressBlocks is not singleton else "" %}
{%- if register.fields is defined -%} {%- for field in register.fields -%} {%- if field.hardwareAccess in ["read-write", "read-only"] %}
assign register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}} § = register__{{block_prefix}}{{register.name|snake|lower}}__{{field.name|snake|lower}}__register;
{%- endif -%} {%- endfor -%} {%- else -%} {%- if register.hardwareAccess in ["read-write", "read-only"] %}
assign register__{{block_prefix}}{{register.name|snake|lower}}                             § = register__{{block_prefix}}{{register.name|snake|lower}}__register;
{%- endif -%} {%- endif -%}
{%- endfor -%} {%- endfor %} {%- endfor -%}
{%- endfilter %}

{§ spacing 1 §}

endmodule

{% endfilter %}
